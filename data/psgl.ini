# Redefine the encoding of the Helvetica font from Standard to ISOLatin1
# so that \305 can be used for Angstroms, for example. Other accented 
# characters available too.
DEFINITION= /Helvetica findfont
DEFINITION= dup length dict begin
DEFINITION=   {1 index /FID ne {def} {pop pop} ifelse} forall
DEFINITION=   /Encoding ISOLatin1Encoding def
DEFINITION=   currentdict
DEFINITION= end
DEFINITION= /Helvetica exch definefont pop
#
DEFINITION= /Helvetica-Bold findfont
DEFINITION= dup length dict begin
DEFINITION=   {1 index /FID ne {def} {pop pop} ifelse} forall
DEFINITION=   /Encoding ISOLatin1Encoding def
DEFINITION=   currentdict
DEFINITION= end
DEFINITION= /Helvetica-Bold exch definefont pop
#
# Definitions of the sizes which you have to use in the definition
# of linetypes and fonttypes if you want the program to now about
# them:
SIZE      = /FSIZE1  0.110 def
SIZE      = /FSIZE2  0.080 def
SIZE      = /FSIZE3  0.060 def
SIZE      = /FSIZE4  0.050 def
SIZE      = /FSIZE5  0.040 def
SIZE      = /FSIZE6  0.035 def
SIZE      = /FSIZE7  0.030 def
SIZE      = /FSIZE8  0.025 def
SIZE      = /FSIZE9  0.020 def
SIZE      = /FSIZE10 0.015 def
# ------------------------------------------------------------------------
SIZE      = /LSIZE1 0.007 def
SIZE      = /LSIZE2 0.003 def
SIZE      = /LSIZE3 0.001 def
# ------------------------------------------------------------------------
# Symbols size:
SIZE      = /SSIZE1 0.013 def
SIZE      = /SSIZE2 0.010 def
SIZE      = /SSIZE3 0.003 def
#-------------------------------------------------------------------------
# Symbol's line width when the symbol's size is about 2 units:
SIZE      = /SYBWDT 0.300 def
#-------------------------------------------------------------------------
FONT      = /font1 {/Helvetica      findfont  FSIZE1 scalefont  setfont} def
    2 2 21
# these numbers define the subscript, superscript and greek fonts 
# associated with the font defined above.
FONT      = /font2 {/Helvetica      findfont  FSIZE2 scalefont  setfont} def
    2 2 22
FONT      = /font3 {/Helvetica      findfont  FSIZE3 scalefont  setfont} def
    4 4 23
FONT      = /font4 {/Helvetica      findfont  FSIZE4 scalefont  setfont} def
    5 5 24
FONT      = /font5 {/Helvetica      findfont  FSIZE5 scalefont  setfont} def
    6 6 25
FONT      = /font6 {/Helvetica      findfont  FSIZE6 scalefont  setfont} def
    7 7 26
FONT      = /font7 {/Helvetica      findfont  FSIZE7 scalefont  setfont} def
    8 8 27
FONT      = /font8 {/Helvetica      findfont  FSIZE8 scalefont  setfont} def
    9 9 28
FONT      = /font9 {/Helvetica      findfont  FSIZE9 scalefont  setfont} def
  10 10 29
FONT      = /font10 {/Helvetica     findfont  FSIZE10 scalefont  setfont} def
  10 10 30
#----------------------------------------------------------------------------
FONT      = /font11 {/Helvetica-Bold findfont  FSIZE1 scalefont  setfont} def
  13 13 21
FONT      = /font12 {/Helvetica-Bold findfont  FSIZE2 scalefont  setfont} def
  14 14 22
FONT      = /font13 {/Helvetica-Bold findfont  FSIZE3 scalefont  setfont} def
  15 15 23
FONT      = /font14 {/Helvetica-Bold findfont  FSIZE4 scalefont  setfont} def
  16 16 24
FONT      = /font15 {/Helvetica-Bold findfont  FSIZE5 scalefont  setfont} def
  17 17 25
FONT      = /font16 {/Helvetica-Bold findfont  FSIZE6 scalefont  setfont} def
  18 18 26
FONT      = /font17 {/Helvetica-Bold findfont  FSIZE7 scalefont  setfont} def
  19 19 27
FONT      = /font18 {/Helvetica-Bold findfont  FSIZE8 scalefont  setfont} def
  19 19 28
FONT      = /font19 {/Helvetica-Bold findfont  FSIZE9 scalefont  setfont} def
  20 20 29
FONT      = /font20 {/Helvetica-Bold findfont  FSIZE10 scalefont  setfont} def
  20 20 30
#----------------------------------------------------------------------------
FONT      = /font21 {/Symbol         findfont  FSIZE1 scalefont  setfont} def
   23 23 7
FONT      = /font22 {/Symbol         findfont  FSIZE2 scalefont  setfont} def
   24 24 8
FONT      = /font23 {/Symbol         findfont  FSIZE3 scalefont  setfont} def
   25 25 9
FONT      = /font24 {/Symbol         findfont  FSIZE4 scalefont  setfont} def
   26 26 9
FONT      = /font25 {/Symbol         findfont  FSIZE5 scalefont  setfont} def
   27 27 9
FONT      = /font26 {/Symbol         findfont  FSIZE6 scalefont  setfont} def
   28 28 9
FONT      = /font27 {/Symbol         findfont  FSIZE7 scalefont  setfont} def
   29 29 9
FONT      = /font28 {/Symbol         findfont  FSIZE8 scalefont  setfont} def
   29 29 9
FONT      = /font29 {/Symbol         findfont  FSIZE9 scalefont  setfont} def
   30 30 9
FONT      = /font30 {/Symbol         findfont  FSIZE10 scalefont  setfont} def
   30 30 9
#------------------------------------------------------------------------
LINE_TYPE = /ltyp1  {0.0 setgray LSIZE1 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp2  {0.0 setgray LSIZE2 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp3  {0.0 setgray LSIZE3 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp4  {0.0 setgray LSIZE1 setlinewidth [0.02 0.01] 0 setdash} def
LINE_TYPE = /ltyp5  {0.0 setgray LSIZE2 setlinewidth [0.02 0.01] 0 setdash} def
LINE_TYPE = /ltyp6  {0.0 setgray LSIZE3 setlinewidth [0.02 0.01] 0 setdash} def
LINE_TYPE = /ltyp7  {0.0 setgray LSIZE1 setlinewidth [0.01 0.01] 0 setdash} def
LINE_TYPE = /ltyp8  {0.0 setgray LSIZE2 setlinewidth [0.01 0.01] 0 setdash} def
LINE_TYPE = /ltyp9  {0.0 setgray LSIZE3 setlinewidth [0.01 0.01] 0 setdash} def
LINE_TYPE = /ltyp10 {0.5 setgray LSIZE1 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp11 {0.5 setgray LSIZE2 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp12 {0.5 setgray LSIZE3 setlinewidth [1 0] 0 setdash} def
LINE_TYPE = /ltyp13 {0.0 setgray LSIZE1 setlinewidth [0.0005 0.0007] 0 setdash} def
LINE_TYPE = /ltyp14 {0.0 setgray LSIZE2 setlinewidth [0.0005 0.0007] 0 setdash} def
LINE_TYPE = /ltyp15 {0.0 setgray LSIZE3 setlinewidth [0.003 0.003] 0 setdash} def
#------------------------------------------------------------------------
# Symbol's linetype:
LINE_TYPE = /linsym {H S B sethsbcolor SYBWDT setlinewidth [1 0] 0 setdash} def
#------------------------------------------------------------------------
# Open square:
SYMBOL    = /symb1 {SSIZE2 SSIZE2 scale -1 -1 moveto 1 -1 lineto  ;
SYMBOL    =         1 1 lineto -1 1 lineto -1 -1 lineto linsym stroke} def
# Filled square:
SYMBOL    = /symb2 {SSIZE1 SSIZE1 scale -1 -1 moveto 1 -1 lineto  ;
SYMBOL    =         1 1 lineto -1 1 lineto -1 -1 lineto H S B sethsbcolor fill} def
# Open circle:
SYMBOL    = /symb3 {SSIZE2 SSIZE2 scale 0 0 1 0 360 arc linsym stroke} def
# Filled circle:
SYMBOL    = /symb4 {SSIZE1 SSIZE1 scale 0 0 1 0 360 arc  H S B sethsbcolor fill} def
# Open romb:
SYMBOL    = /symb5 {SSIZE2 SSIZE2 scale 0 1 moveto 1 0 lineto  ;
SYMBOL    =         0 -1 lineto -1 0 lineto 0 1 lineto linsym stroke} def
# Filled romb:
SYMBOL    = /symb6 {SSIZE1 SSIZE1 scale 0 1 moveto 1 0 lineto  ;
SYMBOL    =         0 -1 lineto -1 0 lineto 0 1 lineto H S B sethsbcolor fill} def
# Open triangle up:
SYMBOL    = /symb7 {SSIZE2 SSIZE2 scale 0 1 moveto ;
SYMBOL    =         1 -1 lineto -1 -1 lineto 0 1 lineto linsym stroke} def
# Filled triangle up:
SYMBOL    = /symb8 {SSIZE1 SSIZE1 scale 0 1 moveto ;
SYMBOL    =         1 -1 lineto -1 -1 lineto 0 1 lineto H S B sethsbcolor fill} def
# Plus:
SYMBOL    = /symb9 {SSIZE1 SSIZE1 scale 0 1 moveto 0 -1 lineto ;
SYMBOL    =         1 0 moveto -1 0 lineto linsym stroke} def
# Small Open circle:
SYMBOL    = /symb10 {SSIZE3 SSIZE3 scale 0 0 1 0 360 arc linsym stroke} def
# Small Filled circle:
SYMBOL    = /symb11 {SSIZE3 SSIZE3 scale 0 0 1 0 360 arc H S B sethsbcolor fill} def
#------------------------------------------------------------------------
# Definitions (do not change):
#
# --- For saving space
DEFINITION= /M2 {moveto} def
DEFINITION= /RM {rmoveto} def
DEFINITION= /L2 {lineto} def
DEFINITION= /NP {newpath} def
DEFINITION= /ST {stroke} def
# -----------------------------------------------------------------------
DEFINITION= %Drawing of empty symb's < 2 to obtain real size 2 (line width!):
DEFINITION= /SSIZE2 SSIZE1 2 2 SYBWDT add div mul def
# -----------------------------------------------------------------------
DEFINITION= % Definition of the procedure to add an arrow to the current path
DEFINITION= % args: x-tail,y-tail,x-tip,y-tip,thick-tail,thick-arrow,len-arrow
DEFINITION= /arrowdict 14 dict def
DEFINITION= arrowdict begin
DEFINITION=  /mtrx matrix def
DEFINITION= end
DEFINITION= /arrow
DEFINITION=   { arrowdict begin
DEFINITION=   /headlength exch def
DEFINITION=   /halfheadthickness exch 2 div def
DEFINITION=   /halfthickness exch 2 div def
DEFINITION=   /tipy exch def /tipx exch def
DEFINITION=   /taily exch def /tailx exch def
DEFINITION=   /dx tipx tailx sub def
DEFINITION=   /dy tipy taily sub def
DEFINITION=   /arrowlength dx dx mul dy dy mul add sqrt def
DEFINITION=   /angle dy dx atan def
DEFINITION=   /base arrowlength headlength sub def
DEFINITION=   /savematrix mtrx currentmatrix def
DEFINITION=   tailx taily translate angle rotate
DEFINITION=   0 halfthickness neg moveto
DEFINITION=   base halfthickness neg lineto
DEFINITION=   base halfheadthickness neg lineto 
DEFINITION=   arrowlength 0 lineto
DEFINITION=   base halfheadthickness lineto 
DEFINITION=   base halfthickness lineto
DEFINITION=   0 halfthickness lineto
DEFINITION=   closepath
DEFINITION=   savematrix setmatrix
DEFINITION=   end
DEFINITION= } def
